_A concise, copy‑pasteable guide covering the exact steps, commands, files, and gotchas for adding the intermediate join model and six mart aggregates, testing in DEV, committing to Git, opening a PR to `main`, and promoting to PROD._

---

## Scope

- Project root: `/home/viperuser/projects/zen_clarity/N_LeTaxity`
- Warehouse: **Snowflake**
- dbt version: `1.10.x`
- You will create:
  - **Intermediate**: `int_nyc__trip_zone` (join + derived columns)
  - **Six marts** for `nyc_taxi_dashboard`:
    1. `agg_daily_trips`
    2. `agg_monthly_cab_type_trip_counts`
    3. `agg_avg_fare_by_pickup_zone`
    4. `agg_avg_passenger_count_by_cab_type`
    5. `agg_busiest_pickup_zone`
    6. `agg_avg_trip_duration_by_cab_type_month`

Directory structure after changes:

```
models/
├─ staging/
│  └─ nyc_taxi/
│     ├─ schema.yml
│     ├─ sources.yml
│     ├─ stg_nyc_taxi__taxi_zone_lookup.sql
│     └─ stg_nyc_taxi__trip_data.sql
├─ intermediate/
│  ├─ int_nyc__trip_zone.sql
│  └─ schema.yml
└─ marts/
   └─ nyc_taxi_dashboard/
      ├─ agg_avg_fare_by_pickup_zone.sql
      ├─ agg_avg_passenger_count_by_cab_type.sql
      ├─ agg_avg_trip_duration_by_cab_type_month.sql
      ├─ agg_busiest_pickup_zone.sql
      ├─ agg_daily_trips.sql
      ├─ agg_monthly_cab_type_trip_counts.sql
      └─ schema.yml
```

---

## 0) Prepare a feature branch

```bash
cd /home/viperuser/projects/zen_clarity
git checkout main
git pull
git checkout -b feat/nyc-intermediate-and-marts
```

---

## 1) Intermediate model

**File:** `models/intermediate/int_nyc__trip_zone.sql`

```sql
{{ config(materialized='view') }}  -- switch to 'table' later for performance

with trips as (
  select
    vendor_id,
    pickup_at,
    dropoff_at,
    pickup_location_id,
    dropoff_location_id,
    passenger_count,
    trip_distance,
    fare_amount,
    tip_amount,
    total_amount,
    cab_type
  from {{ ref('stg_nyc_taxi__trip_data') }}
),
zones as (
  select
    location_id,
    zone    as pickup_zone,
    borough as pickup_borough
  from {{ ref('stg_nyc_taxi__taxi_zone_lookup') }}
)

select
  t.*,
  z.pickup_zone,
  z.pickup_borough,
  cast(t.pickup_at as date)                           as pickup_date,
  cast(date_trunc('month', t.pickup_at) as date)      as pickup_month,
  to_char(date_trunc('month', t.pickup_at), 'YYYY-MM') as pickup_month_ym,
  extract(hour from t.pickup_at)                      as pickup_hour,
  datediff('minute', t.pickup_at, t.dropoff_at)       as trip_duration_min
from trips t
left join zones z
  on t.pickup_location_id = z.location_id
where t.dropoff_at >= t.pickup_at
```

**Tests:** `models/intermediate/schema.yml`

```yaml
version: 2
models:
  - name: int_nyc__trip_zone
    description: "Trips joined to zone with derived date/hour/duration fields"
    columns:
      - name: pickup_at
        tests: [not_null]
      - name: pickup_month
        tests: [not_null]
      - name: pickup_zone
        description: "Zone resolved from pickup_location_id"
      - name: trip_duration_min
        description: "Minutes between pickup and dropoff; non-negative due to sanity filter"
```

**Build & test (DEV):**

```bash
cd N_LeTaxity
source venv/bin/activate
dbt run  -s int_nyc__trip_zone --target dev
dbt test -s int_nyc__trip_zone --target dev
```

---

## 2) Mart models (NYC Taxi Dashboard)

All marts **select from** `{{ ref('int_nyc__trip_zone') }}`. Start as **views**.

> Folder: `models/marts/nyc_taxi_dashboard/`

### 2.1 `agg_daily_trips.sql`
```sql
{{ config(materialized='view') }}

select
  pickup_date,
  pickup_hour,
  pickup_zone,
  count(*) as total_trips
from {{ ref('int_nyc__trip_zone') }}
group by 1,2,3
```

### 2.2 `agg_monthly_cab_type_trip_counts.sql`
```sql
{{ config(materialized='view') }}

select
  cab_type,
  pickup_month,
  count(*) as trip_count
from {{ ref('int_nyc__trip_zone') }}
group by 1,2
```

### 2.3 `agg_avg_fare_by_pickup_zone.sql`
```sql
{{ config(materialized='view') }}

select
  pickup_zone,
  avg(fare_amount) as avg_fare
from {{ ref('int_nyc__trip_zone') }}
where fare_amount is not null
group by 1
```

### 2.4 `agg_avg_passenger_count_by_cab_type.sql`
```sql
{{ config(materialized='view') }}

select
  cab_type,
  avg(passenger_count) as avg_passenger_count
from {{ ref('int_nyc__trip_zone') }}
where passenger_count is not null
group by 1
```

### 2.5 `agg_busiest_pickup_zone.sql`
```sql
{{ config(materialized='view') }}

with zone_counts as (
  select pickup_zone, count(*) as total_trips
  from {{ ref('int_nyc__trip_zone') }}
  group by 1
),
ranked_overall as (
  select
    pickup_zone,
    total_trips,
    dense_rank() over (order by total_trips desc) as rnk
  from zone_counts
),
zone_counts_month as (
  select pickup_month, pickup_zone, count(*) as total_trips
  from {{ ref('int_nyc__trip_zone') }}
  group by 1,2
),
ranked_month as (
  select
    pickup_month,
    pickup_zone,
    total_trips,
    dense_rank() over (partition by pickup_month order by total_trips desc) as rnk
  from zone_counts_month
)

select
  'overall' as grain,
  cast(null as date) as pickup_month,
  pickup_zone,
  total_trips,
  rnk
from ranked_overall
where rnk = 1

union all

select
  'by_month' as grain,
  pickup_month,
  pickup_zone,
  total_trips,
  rnk
from ranked_month
where rnk = 1
```

### 2.6 `agg_avg_trip_duration_by_cab_type_month.sql`
```sql
{{ config(materialized='view') }}

select
  cab_type,
  pickup_month,
  avg(trip_duration_min) as avg_trip_duration_min
from {{ ref('int_nyc__trip_zone') }}
where trip_duration_min is not null
group by 1,2
```

**YAML tests:** `models/marts/nyc_taxi_dashboard/schema.yml`

```yaml
version: 2
models:
  - name: agg_daily_trips
    columns:
      - name: pickup_date
        tests: [not_null]
      - name: pickup_hour
        tests: [not_null]
      - name: pickup_zone
        tests: [not_null]
      - name: total_trips
        tests: [not_null]

  - name: agg_monthly_cab_type_trip_counts
    columns:
      - name: cab_type
        tests: [not_null]
      - name: pickup_month
        tests: [not_null]
      - name: trip_count
        tests: [not_null]

  - name: agg_avg_fare_by_pickup_zone
    columns:
      - name: pickup_zone
        tests: [not_null]
      - name: avg_fare
        tests: [not_null]

  - name: agg_avg_passenger_count_by_cab_type
    columns:
      - name: cab_type
        tests: [not_null]
      - name: avg_passenger_count
        tests: [not_null]

  - name: agg_busiest_pickup_zone
    columns:
      - name: grain
        description: "'overall' or 'by_month'"
        tests: [not_null]
      - name: pickup_zone
        tests: [not_null]
      - name: total_trips
        tests: [not_null]

  - name: agg_avg_trip_duration_by_cab_type_month
    columns:
      - name: cab_type
        tests: [not_null]
      - name: pickup_month
        tests: [not_null]
      - name: avg_trip_duration_min
        tests: [not_null]
```

**Build & test (DEV):**

```bash
dbt run  -s marts.nyc_taxi_dashboard --target dev
dbt test -s marts.nyc_taxi_dashboard --target dev
# If intermediate logic changes, rebuild dependents:
dbt run -s int_nyc__trip_zone+ --target dev
```

---

## 3) Docs (optional but recommended)

```bash
dbt docs generate
dbt docs serve
```
- Open the lineage graph and verify marts → `int_nyc__trip_zone` → staging → sources.

---

## 4) Git workflow (commit, push, PR)

```bash
# stage & commit intermediate
git add models/intermediate/*.sql models/intermediate/schema.yml
git commit -m "feat: add int_nyc__trip_zone intermediate with derived fields"

# stage & commit marts + tests
git add models/marts/nyc_taxi_dashboard/*.sql models/marts/nyc_taxi_dashboard/schema.yml
git commit -m "feat(marts): add 6 NYC dashboard aggregates powered by int_nyc__trip_zone"

# push feature branch
git push -u origin feat/nyc-intermediate-and-marts

# open PR on GitHub: base=main, compare=feat/nyc-intermediate-and-marts
# merge PR
```

Update local `main`:
```bash
git checkout main
git pull
```

---

## 5) Promote to PROD (dbt targets)

Make sure your `~/.dbt/profiles.yml` has `prod` target with the correct `schema` (e.g., `PROD_VIPER`). Then:

```bash
cd N_LeTaxity
source venv/bin/activate

dbt run  -s int_nyc__trip_zone+ --target prod
dbt test -s marts.nyc_taxi_dashboard --target prod
```

> **Note:** Code promotion (PR → `main`) is separate from warehouse promotion (`--target prod`). Same code, different target/schema.

---

## 6) Performance tips (optional)

- Keep **intermediate as `view`** while prototyping.
- If dashboards get heavy, switch `int_nyc__trip_zone` to **`table`**:
  ```sql
  {{ config(materialized='table') }}
  ```
  Then rebuild it + downstream:
  ```bash
  dbt run -s int_nyc__trip_zone+ --target dev
  ```
- Consider clustering by date if you materialize as table and filter by date often:
  ```sql
  -- Snowflake example (run once):
  ALTER TABLE <DEV_SCHEMA>.INT_NYC__TRIP_ZONE CLUSTER BY (pickup_month);
  ```

---

## 7) Common troubleshooting

- **Model not found / tests warn “patch not found”:**  
  Ensure SQL filename matches YAML `models: - name:` exactly (underscores count).

- **Selector doesn’t match any nodes:**  
  Use `dbt ls -s <name>` or path selectors like `path:models/intermediate`.

- **Stale parsing cache:**  
  ```bash
  dbt clean && rm -rf target && dbt deps && dbt parse
  ```

- **Wrong environment:**  
  Verify target with `dbt debug`. DEV builds to `DEV_VIPER`; PROD to `PROD_VIPER` (per `profiles.yml`).

---

## 8) Handy selector cheats

```bash
# single model by name
dbt run -s int_nyc__trip_zone

# by folder
dbt run -s path:models/marts/nyc_taxi_dashboard

# model + its dependents
dbt run -s int_nyc__trip_zone+

# tests for a folder
dbt test -s marts.nyc_taxi_dashboard
```

---

**End of guide.**
