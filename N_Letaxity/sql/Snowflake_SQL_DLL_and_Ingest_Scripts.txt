--Step 1 Database & Schema Selection

USE DATABASE nyc_taxi_db;
USE SCHEMA batch_data;

--step 2 Create External Storage

CREATE OR REPLACE STORAGE INTEGRATION s3_batch_data_integration
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = S3
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::667137120741:role/teo_snowflake_s3_role'
  STORAGE_ALLOWED_LOCATIONS = (
    's3://teo-nyc-taxi/processed/trip_data/', 
    's3://teo-nyc-taxi/processed/taxi_zone_lookup/'

--step 3 define which data format
    
    CREATE OR REPLACE FILE FORMAT parquet_format
    TYPE = 'PARQUET';



--step 4 External State Creation

  CREATE OR REPLACE STAGE S3_STAGE_TRIP_DATA
  URL = 's3://teo-nyc-taxi/processed/trip_data/'
  STORAGE_INTEGRATION = s3_batch_data_integration
  FILE_FORMAT = parquet_format;

  CREATE OR REPLACE STAGE S3_NYC_TAXI_ZONE_LOOKUP 
  URL = 's3://teo-nyc-taxi/processed/taxi_zone_lookup/'
  STORAGE_INTEGRATION = s3_batch_data_integration
  FILE_FORMAT = parquet_format;


  -- Step 5: Create destination table


CREATE OR REPLACE TABLE trip_data (
  vendorid INT,
  pickup_datetime TIMESTAMP,
  dropoff_datetime TIMESTAMP,
  store_and_fwd_flag STRING,
  ratecodeid BIGINT,
  pulocationid INT,
  dolocationid INT,
  passenger_count BIGINT,
  trip_distance DOUBLE,
  fare_amount DOUBLE,
  extra DOUBLE,
  mta_tax DOUBLE,
  tip_amount DOUBLE,
  tolls_amount DOUBLE,
  ehail_fee DOUBLE,
  improvement_surcharge DOUBLE,
  total_amount DOUBLE,
  payment_type BIGINT,
  trip_type BIGINT,
  congestion_surcharge DOUBLE,
  airport_fee DOUBLE,
  cab_type STRING,
  year INT AS YEAR(pickup_datetime),
  month INT AS MONTH(pickup_datetime),
  day INT AS DAY(pickup_datetime),
  filename_loaded STRING,
  load_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
)
CLUSTER BY (pickup_datetime);

-- Step 6 Load Data 

COPY INTO trip_data (
  vendorid,
  pickup_datetime,
  dropoff_datetime,
  store_and_fwd_flag,
  ratecodeid,
  pulocationid,
  dolocationid,
  passenger_count,
  trip_distance,
  fare_amount,
  extra,
  mta_tax,
  tip_amount,
  tolls_amount,
  ehail_fee,
  improvement_surcharge,
  total_amount,
  payment_type,
  trip_type,
  congestion_surcharge,
  airport_fee,
  cab_type,
  filename_loaded
)
FROM (
  SELECT
    $1:vendorid::INT,
    $1:pickup_datetime::TIMESTAMP,
    $1:dropoff_datetime::TIMESTAMP,
    $1:store_and_fwd_flag::STRING,
    $1:ratecodeid::BIGINT,
    $1:pulocationid::INT,
    $1:dolocationid::INT,
    $1:passenger_count::BIGINT,
    $1:trip_distance::DOUBLE,
    $1:fare_amount::DOUBLE,
    $1:extra::DOUBLE,
    $1:mta_tax::DOUBLE,
    $1:tip_amount::DOUBLE,
    $1:tolls_amount::DOUBLE,
    $1:ehail_fee::DOUBLE,
    $1:improvement_surcharge::DOUBLE,
    $1:total_amount::DOUBLE,
    $1:payment_type::BIGINT,
    $1:trip_type::BIGINT,
    $1:congestion_surcharge::DOUBLE,
    $1:airport_fee::DOUBLE,
    'yellow' AS cab_type,
    METADATA$FILENAME
 FROM @S3_STAGE_TRIP_DATA/cab_type=yellow/year=2024/month=1/

)
FILE_FORMAT = (FORMAT_NAME = parquet_format)
PATTERN = '.*\.snappy\.parquet$'


--Load TAXI_ZONE_LOOKUP
COPY INTO NYC_TAXI_DB.BATCH_DATA.TAXI_ZONE_LOOKUP (
  LOCATION_ID,
  BOROUGH,
  ZONE,
  SERVICE_ZONE,
  FILENAME_LOADED
)
FROM (
  SELECT
    $1:location_id::NUMBER,
    $1:borough::VARCHAR,
    $1:zone::VARCHAR,
    $1:service_zone::VARCHAR,
    METADATA$FILENAME
  FROM @S3_NYC_TAXI_ZONE_LOOKUP 
)
FILE_FORMAT = (FORMAT_NAME = parquet_format);

-- Create Join View

CREATE OR REPLACE VIEW taxi_trip_data_vw AS
SELECT
   t.vendorid,
   t.pickup_datetime,
   t.dropoff_datetime,
   t.store_and_fwd_flag,
   t.ratecodeid,
   t.pulocationid,
   t.dolocationid,
   t.passenger_count,
   t.trip_distance,
   t.fare_amount,
   t.extra,
   t.mta_tax,
   t.tip_amount,
   t.tolls_amount,
   t.ehail_fee,
   t.improvement_surcharge,
   t.total_amount,
   t.payment_type,
   t.trip_type,
   t.congestion_surcharge,
   t.airport_fee,
   t.cab_type,
   z1.zone AS pickup_zone,
   z2.zone AS dropoff_zone
FROM
   trip_data t
   LEFT JOIN taxi_zone_lookup z1 ON t.pulocationid = z1.location_id
   LEFT JOIN taxi_zone_lookup z2 ON t.dolocationid = z2.location_id;

   SELECT cab_type, 
       YEAR(pickup_datetime) AS year, 
       MONTH(pickup_datetime) AS month, 
       COUNT(*) AS trip_count
FROM taxi_trip_data_vw
GROUP BY 1, 2, 3
ORDER BY 2, 3, 1;





